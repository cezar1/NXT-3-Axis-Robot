/*
Changelog

TODO
  + Increase number of poits
  + Add function for point name
  + Avoid going to zero in complex procedure
  + Define initial retract position for axis 3 to prevent collisions when going to home

20130820

20130819
  + (12:44) Modified complex procedure not to pass through home position
  + (12:45) Encountered issues due to axis 1 backlash, should be compensated by adjusting points positions between each other
  
20130816
  + (13:26) Added saving points procedure, travelling to home position after startup, release axes feature
  
20130814
  + (15:15) Added homing procedure, can be initiated/cancelled from orange center button

20130813
  + (16:37) Modified point data structure to contain

20130807
  + (17:40) Added homing axis activities and type for homing
  + (18:06) Added points saving and loading

20130806
  + (22:26) Modified structure definition, renamed to Point.Position, Point.Speed, replaced code to allow compiling

20130723
  + (22:46) Modified point structure definition, added AxisSpeed[MAX_AXES], replaced axis 1,2,3 with AxisPosition[MAX_AXES]
  + Above is attempt, compilation failed while addresing something like val=myStruct[i].myStructMember[j];
  + (23:59) Added fnc_LoadPoints and fnc_SavePoints. Integrated fnc_SavePoints into logic
*/
#define HMI_DEBUG_STRING1 0 //If true will always display contents of myDebugString1 on line 8

#define AXIS1 0
#define AXIS2 1
#define AXIS3 2

#define AXIS1_P 20
#define AXIS1_I 40
#define AXIS1_D 100

#define AXIS2_P 45
#define AXIS2_I 45
#define AXIS2_D 45

#define AXIS3_P 45
#define AXIS3_I 45
#define AXIS3_D 45

#define AXIS1_APPROACH_HOME_SPEED 40
#define AXIS1_AFTER_HOME_SPEED 80
#define AXIS1_AFTER_HOME_POSITION 1000

#define AXIS2_APPROACH_HOME_SPEED 15
#define AXIS2_AFTER_HOME_SPEED 50
#define AXIS2_AFTER_HOME_POSITION 300

#define AXIS3_APPROACH_HOME_SPEED 25
#define AXIS3_AFTER_HOME_SPEED 30
#define AXIS3_AFTER_HOME_POSITION 250

#define MAX_AXES 3

#define AXIS_POWER 50

#define AXIS_TEST_MOTION 250
#define AXIS_TEST_SPEED  50

#define AXIS_STANDSTILL_VELOCITY_THRESHOLD 2
#define AXIS_STANDSTILL_VELOCITY_HYSTERESIS 1

#define MAX_POINTS 20


#define ACTIVITY_TEACHPOINT1   0
#define ACTIVITY_TEACHPOINT2   1
#define ACTIVITY_TEACHPOINT3   2
#define ACTIVITY_TEACHPOINT4   3
#define ACTIVITY_TEACHPOINT5   4
#define ACTIVITY_TEACHPOINT6   5
#define ACTIVITY_TEACHPOINT7   6
#define ACTIVITY_TEACHPOINT8   7
#define ACTIVITY_TEACHPOINT9   8
#define ACTIVITY_TEACHPOINT10  9
#define ACTIVITY_TEACHPOINT11  10
#define ACTIVITY_TEACHPOINT12  11
#define ACTIVITY_TEACHPOINT13  12
#define ACTIVITY_TEACHPOINT14  13
#define ACTIVITY_TEACHPOINT15  14
#define ACTIVITY_TEACHPOINT16  15
#define ACTIVITY_TEACHPOINT17  16
#define ACTIVITY_TEACHPOINT18  17
#define ACTIVITY_TEACHPOINT19  18
#define ACTIVITY_TEACHPOINT20  19

#define ACTIVITY_PP           20
#define ACTIVITY_COMPLEX      21
#define ACTIVITY_SAVE_POINTS  22
#define ACTIVITY_HOME_AXIS1   23
#define ACTIVITY_HOME_AXIS2   24
#define ACTIVITY_HOME_AXIS3   25
#define ACTIVITY_RELEASE_AXES 26
#define ACTIVITY_EXIT_PROG    27
#define MAX_ACTIVITIES        28

#define ACTIVITY_TYPE_TEACH_POINT      0
#define ACTIVITY_TYPE_POINT_TO_POINT   1
#define ACTIVITY_TYPE_COMPLEX_1        2
#define ACTIVITY_TYPE_SAVE_POINTS      3
#define ACTIVITY_TYPE_HOME_AXIS        4
#define ACTIVITY_TYPE_RELEASE_AXES     5
#define ACTIVITY_TYPE_EXIT_PROG        6

#define POSITION_REACHED_THRESHOLD 50

#define ULTRASONIC_THRESHOLD 20

#define IN_HOME_POSITION 0
#define BEFORE_PICK_UP   1
#define CHECK_PICK_UP_1  2
#define PREP1_PICK_UP_1  3
#define PREP2_PICK_UP_1  4
#define PICK_UP_1        5
#define TRANSPORT        6
#define DROP_1           7
#define DROP_2           8

#define POINTS_FILENAME "Points.txt"
#define POSITION_FILENAME "Position.txt"

struct Point
  {
    long Speed_A1[MAX_AXES];
    long Position[MAX_AXES];
  };

//Point myPoints[MAX_POINTS];

long myPointsSpeed[MAX_POINTS][MAX_AXES];
long myPointsPosition[MAX_POINTS][MAX_AXES];

//Point tempPoint;
int myActivePoint,myActivity,myActivityType;

//For homing
int myHomingAxis;
bool myInitHoming,myResetHoming,myHomingActive;
bool myInitMotionAfterHoming;

long myTachoCounts[MAX_AXES];
int myActualMotorSpeed[MAX_AXES];
bool myMotionInitiated[MAX_AXES];
bool myMotionActive[MAX_AXES];
bool myMotionStandstill[MAX_AXES];
bool myMotionCommandOn[MAX_AXES];
bool myGlobalPositionSetpointAvailable;
int myUltrasonicDist;
int myProgramState;

bool myRequestSingleMotionCommand,myItineraryActive,myInitItinerary,myProgramActive,myInitProgram;
string tempstr;

//Debug variables
string myDebugString1;
long myDebugLong1;

bool fnc_LoadPosition()
{
  ClearScreen();
  string s="Travel to home";
  TextOut(0, LCD_LINE4,s);
  byte fileHandle;
  short fileSize;
  unsigned int result;
  result=OpenFileRead(POSITION_FILENAME, fileSize, fileHandle);
  if (result==LDR_SUCCESS)
  {
    long value[MAX_AXES];
    long val;
    Read(fileHandle,val);
    value[AXIS1]=val;
    //myDebugString1=NumToStr(value);
    Read(fileHandle,val);
    value[AXIS2]=val;
    Read(fileHandle,val);
    value[AXIS3]=val;
    RotateMotorPID(OUT_B, 50, (-1)*value[AXIS2],AXIS2_P,AXIS2_I,AXIS2_D);
    RotateMotorPID(OUT_C, 50, (-1)*value[AXIS3],AXIS3_P,AXIS3_I,AXIS3_D);
    RotateMotorPID(OUT_A, 50, (-1)*value[AXIS1],AXIS1_P,AXIS1_I,AXIS1_D);
    ResetAllTachoCounts(OUT_ABC);
    CloseFile(fileHandle);
    return true;
  }
  else
  {
  return false;
  }
}

bool fnc_LoadPoints()
{
  byte fileHandle;
  short fileSize;
  unsigned int result;
  result=OpenFileRead(POINTS_FILENAME, fileSize, fileHandle);
  if (result==LDR_SUCCESS)
  {
  string line,tmp;
  for(int i=ACTIVITY_TEACHPOINT1; i<MAX_POINTS; i++ )
  {
    line="00000,00000,00000,000,000,000";
    ReadLn(fileHandle, line);
    tmp=SubStr(line, 0, 5);
    myPointsPosition[i][AXIS1]=StrToNum(tmp);
    tmp=SubStr(line, 6, 5);
    myPointsPosition[i][AXIS2]=StrToNum(tmp);
    tmp=SubStr(line, 12, 5);
    myPointsPosition[i][AXIS3]=StrToNum(tmp);
    tmp=SubStr(line, 18, 3);
    myPointsSpeed[i][AXIS1]=StrToNum(tmp);
    tmp=SubStr(line, 22, 3);
    myPointsSpeed[i][AXIS2]=StrToNum(tmp);
    tmp=SubStr(line, 26, 3);
    myPointsSpeed[i][AXIS3]=StrToNum(tmp);
  }
  CloseFile(fileHandle);
  return true;
  }
  else
  {
  return false;
  }
}

bool fnc_SavePosition(const long Axis1,const long Axis2, const long Axis3)
{
  byte fileHandle;
  short fileSize = 512;
  short bytesWritten;
  string write,tmp;
  unsigned int result;
  DeleteFile(POSITION_FILENAME);
  result=CreateFile(POSITION_FILENAME, fileSize, fileHandle);
  if (result==LDR_SUCCESS)
  {
  //for(int i=AXIS1; i<MAX_AXES; i++ )
  //  {
      //Write(fileHandle,myTachoCounts[i]);
      Write(fileHandle,Axis1);
      Write(fileHandle,Axis2);
      Write(fileHandle,Axis3);
      //myDebugLong1=myDebugLong1+bytesWritten;
   // }
  CloseFile(fileHandle);
  return true;
  }
  else
  {
  return false;
  }
}

string fnc_MakePointName(int vPoint)
{
  switch(vPoint)
      {case ACTIVITY_TEACHPOINT1 :return "Home";break;
       case ACTIVITY_TEACHPOINT2 :return "Before pick 1";break;
       case ACTIVITY_TEACHPOINT3 :return "Before pick 2";break;
       case ACTIVITY_TEACHPOINT4 :return "Before pick 3";break;
       case ACTIVITY_TEACHPOINT5 :return "Check pick 1";break;
       case ACTIVITY_TEACHPOINT6 :return "Check pick 2";break;
       case ACTIVITY_TEACHPOINT7 :return "Check pick 3";break;
       case ACTIVITY_TEACHPOINT8 :return "Return before 1";break;
       case ACTIVITY_TEACHPOINT9 :return "Return before 2";break;
       case ACTIVITY_TEACHPOINT10:return "Prep pick 1";break;
       case ACTIVITY_TEACHPOINT11:return "Prep pick 2";break;
       case ACTIVITY_TEACHPOINT12:return "Prep pick 3";break;
       case ACTIVITY_TEACHPOINT13:return "Pick 1";break;
       case ACTIVITY_TEACHPOINT14:return "Pick 2";break;
       case ACTIVITY_TEACHPOINT15:return "Pick 3";break;
       case ACTIVITY_TEACHPOINT16:return "Transport 1";break;
       case ACTIVITY_TEACHPOINT17:return "Transport 2";break;
       case ACTIVITY_TEACHPOINT18:return "Drop 1";break;
       case ACTIVITY_TEACHPOINT19:return "Drop 2";break;
       case ACTIVITY_TEACHPOINT20:return "Drop 3";break;
       default:return "Undefined";break;
      }
}

bool fnc_SavePoints()
{
  byte fileHandle;
  short fileSize = 1024;
  short bytesWritten;
  string write,tmp;
  unsigned int result;
  DeleteFile(POINTS_FILENAME);
  result=CreateFile(POINTS_FILENAME, fileSize, fileHandle);
  if (result==LDR_SUCCESS)
  {
  for(int i=ACTIVITY_TEACHPOINT1; i<MAX_POINTS; i++ )
    {
      write = "";
      tmp = FormatNum("%05d", myPointsPosition[i][AXIS1]);
      write = StrCat(write, tmp);
      tmp = FormatNum("%05d", myPointsPosition[i][AXIS2]);
      write = StrCat(write, ",", tmp);
      tmp = FormatNum("%05d", myPointsPosition[i][AXIS3]);
      write = StrCat(write, ",", tmp);
      tmp = FormatNum("%03d", myPointsSpeed[i][AXIS1]);
      write = StrCat(write, ",", tmp);
      tmp = FormatNum("%03d", myPointsSpeed[i][AXIS2]);
      write = StrCat(write, ",", tmp);
      tmp = FormatNum("%03d.", myPointsSpeed[i][AXIS3]);
      write = StrCat(write, ",", tmp);
      WriteLnString(fileHandle,write, bytesWritten);
    }
  CloseFile(fileHandle);
  return true;
  }
  else
  {
  return false;
  }
}

task INPUT()  {
  int i;
  bool myButtonCondition,wRE_ButtonPressed[3],wL_ButtonPressed[3],wRE_Touch,wL_Touch,iE_Touch;
  wRE_Touch=false;wL_Touch=false;
  while(true) {
    //myDebugString1=NumToStr(myActivityType);
    myTachoCounts[AXIS1]=MotorTachoCount(OUT_A);
    myTachoCounts[AXIS2]=MotorTachoCount(OUT_B);
    myTachoCounts[AXIS3]=MotorTachoCount(OUT_C);
    myActualMotorSpeed[AXIS1]=MotorActualSpeed(OUT_A);
    myActualMotorSpeed[AXIS2]=MotorActualSpeed(OUT_B);
    myActualMotorSpeed[AXIS3]=MotorActualSpeed(OUT_C);
    myUltrasonicDist=SensorUS(S2);
    iE_Touch=(Sensor(IN_1)==1);
    wRE_Touch=(iE_Touch && !wL_Touch);
    wL_Touch=iE_Touch;
    if(wRE_Touch && myActivityType==ACTIVITY_TYPE_TEACH_POINT) {
      for(i=AXIS1;i<MAX_AXES;i++) {
      myPointsPosition[myActivePoint][i]=myTachoCounts[i];
      }
      PlayFileEx("! Backup.rso", 3, false);Wait(MS_500);}
    if(wRE_Touch && myHomingActive && myActivityType==ACTIVITY_TYPE_HOME_AXIS) {
      PlayFileEx("Good.rso", 3, false);Wait(MS_500);
      myHomingActive=false;
      //Reset encoder axis
      switch(myHomingAxis)
      {case AXIS1:ResetAllTachoCounts(OUT_A);break;
       case AXIS2:ResetAllTachoCounts(OUT_B);break;
       case AXIS3:ResetAllTachoCounts(OUT_C);break;
      }
      myInitMotionAfterHoming=true;
      }
    for(i=0;i<3;i++) {
        switch(i)
              {
                case 0:myButtonCondition=ButtonPressed(BTNRIGHT, false);break;
                case 1:myButtonCondition=ButtonPressed(BTNLEFT, false);break;
                case 2:myButtonCondition=ButtonPressed(BTNCENTER, false);break;
              }

            wRE_ButtonPressed[i]=(myButtonCondition && !wL_ButtonPressed[i]);
            wL_ButtonPressed[i]=myButtonCondition;
            if (wRE_ButtonPressed[i] && i==0 && myGlobalPositionSetpointAvailable && !myItineraryActive && !myProgramActive && !myHomingActive) {myActivity=(myActivity+1) % MAX_ACTIVITIES;myRequestSingleMotionCommand=false;}
            if (wRE_ButtonPressed[i] && i==1 && myGlobalPositionSetpointAvailable && !myItineraryActive && !myProgramActive && !myHomingActive) {myActivity=myActivity-1;if (myActivity<0) myActivity=MAX_ACTIVITIES-1;myRequestSingleMotionCommand=false;}
            if (wRE_ButtonPressed[i] && (i==0 || i==1) && myActivity==ACTIVITY_PP) {myActivePoint=ACTIVITY_TEACHPOINT1;}
            if (wRE_ButtonPressed[i] && i==2)
              {
                switch(myActivityType)
                  {
                    case ACTIVITY_TYPE_TEACH_POINT:
                      if (myGlobalPositionSetpointAvailable) myRequestSingleMotionCommand=true;
                      break;
                    case ACTIVITY_TYPE_POINT_TO_POINT:
                      if (myGlobalPositionSetpointAvailable && !myItineraryActive) {myInitItinerary=true;}
                      break;
                    case ACTIVITY_TYPE_COMPLEX_1:
                      myProgramActive=!myProgramActive;if (myProgramActive) {myInitProgram=true;}
                      break;
                    case ACTIVITY_TYPE_HOME_AXIS:
                      myHomingActive=!myHomingActive;if (myHomingActive) {myInitHoming=true;} else {myResetHoming=true;}
                      break;
                    case ACTIVITY_TYPE_SAVE_POINTS:
                      if (fnc_SavePoints()) {PlayFileEx("Good.rso", 3, false);}
                      else                 { PlayFileEx("Error.rso", 3, false);}
                      break;
                    case ACTIVITY_TYPE_RELEASE_AXES:
                      Coast(OUT_ABC);
                      PlayFileEx("Good.rso", 3, false);
                      break;
                    case ACTIVITY_TYPE_EXIT_PROG:
                      if (fnc_SavePosition(myTachoCounts[AXIS1],myTachoCounts[AXIS2],myTachoCounts[AXIS3]))
                                           {PlayFileEx("Good.rso", 3, false);Wait(SEC_2);StopAllTasks();}
                      else                 {PlayFileEx("Error.rso", 3, false);}
                      break;
                  }
              }
          }

    }
}


task HMI()
{ int i;
  string s;
  long val;
  Point tmp;
  while (true) {
    ClearScreen();
    s="A1:";
    s=strcat(s,FormatNum("%05d,", myTachoCounts[AXIS1]));
    s=strcat(s,FormatNum("%03d,",myActualMotorSpeed[AXIS1]));
    if (myMotionActive[AXIS1]==true) tempstr="mov"; else tempstr="stp";
    s=strcat(s,tempstr);
    TextOut(0, LCD_LINE1,s);
    s="A2:";
    s=strcat(s,FormatNum("%05d,", myTachoCounts[AXIS2]));
    s=strcat(s,FormatNum("%03d,",myActualMotorSpeed[AXIS2]));
    if (myMotionActive[AXIS2]==true) tempstr="mov"; else tempstr="stp";
    s=strcat(s,tempstr);
    TextOut(0, LCD_LINE2,s);
    s="A3:";
    s=strcat(s,FormatNum("%05d,", myTachoCounts[AXIS3]));
    s=strcat(s,FormatNum("%03d,",myActualMotorSpeed[AXIS3]));
    if (myMotionActive[AXIS3]==true) tempstr="mov"; else tempstr="stp";
    s=strcat(s,tempstr);
    TextOut(0, LCD_LINE3,s);

    switch(myActivityType)
          {
            case ACTIVITY_TYPE_TEACH_POINT:
              s="P";
              s=strcat(s,NumToStr(myActivePoint));
              s=strcat(s,":");
              s=strcat(s,fnc_MakePointName(myActivePoint));
              TextOut(0, LCD_LINE4,s);
              for(i=1;i<=MAX_AXES;i++)
              {
               s="P.A";
               s=strcat(s,NumToStr(i));
               s=strcat(s,":");
               val=myPointsPosition[myActivePoint][i-1];
               s=strcat(s,FormatNum("%05d,", val));
               val=myPointsSpeed[myActivePoint][i-1];
               s=strcat(s,FormatNum("%03d", val));
               TextOut(0, LCD_LINE5-(i-1)*8,s);
              }
              s="Go point.Teach.";
              TextOut(0, LCD_LINE8,s);
              break;
            case ACTIVITY_TYPE_POINT_TO_POINT:
              s="Point to point";
              TextOut(0, LCD_LINE4,s);
              s="Travel from";
              TextOut(0, LCD_LINE5,s);
              s="points 0 to 8.";
              TextOut(0, LCD_LINE6,s);
              s="Active point:P";
              s=strcat(s,NumToStr(myActivePoint));
              TextOut(0, LCD_LINE7,s);
              s="Start.Push stop.";
              TextOut(0, LCD_LINE8,s);
              break;
            case ACTIVITY_TYPE_COMPLEX_1:
              s="Complex";
              TextOut(0, LCD_LINE4,s);
              s="Ultrasonic:";
              s=strcat(s,NumToStr(myUltrasonicDist));
              TextOut(0, LCD_LINE5,s);
              switch (myProgramState) {
              case IN_HOME_POSITION:
                s="Home";break;
              case BEFORE_PICK_UP:
                s="Before pick 1";break;
              case CHECK_PICK_UP_1:
                s="Check pick 1";break;
              case PREP1_PICK_UP_1:
                s="Prep 1 pick";break;
              case PREP2_PICK_UP_1:
                s="Prep 2 pick";break;
              case PICK_UP_1:
                s="Pick 1";break;
              case TRANSPORT:
                s="Transport";break;
              case DROP_1:
                s="Drop 1";break;
              case DROP_2:
                s="Drop 2";break;    }
              TextOut(0, LCD_LINE6,s);
              break;
            case ACTIVITY_TYPE_SAVE_POINTS:
              s="Save points to";
              TextOut(0, LCD_LINE4,s);
              s="file system";
              TextOut(0, LCD_LINE5,s);
              break;
            case ACTIVITY_TYPE_HOME_AXIS:
              s="Start homing";
              TextOut(0, LCD_LINE4,s);
              s="axis ";
              s=strcat(s,NumToStr(myHomingAxis+1));
              TextOut(0, LCD_LINE5,s);
              break;
            case ACTIVITY_TYPE_EXIT_PROG:
              s="Exit program";
              TextOut(0, LCD_LINE4,s);
              s="Save position";
              TextOut(0, LCD_LINE5,s);
              break;
            case ACTIVITY_TYPE_RELEASE_AXES:
              s="Release axes";
              TextOut(0, LCD_LINE4,s);
              break;
          }
    //FontTextOut( 0,60, "PropTiny.RIC", "Now is the winter of our discontent made glorious summer by this son of York.  And all the clouds that lowered upon our house in the deep bosom of the ocean buried.", DRAW_OPT_NORMAL|DRAW_OPT_FONT_DIR_L2RB|DRAW_OPT_FONT_WRAP );
    if (HMI_DEBUG_STRING1) {s=myDebugString1;TextOut(0, LCD_LINE8,s);}
    Wait(MS_500);
  }
}

task CONTROL()
{
  string s;
  while(true) {
    //Axis 1 standstill monitoring
    if (myMotionInitiated[AXIS1] && abs(myActualMotorSpeed[AXIS1])>AXIS_STANDSTILL_VELOCITY_THRESHOLD+AXIS_STANDSTILL_VELOCITY_HYSTERESIS)
      {myMotionActive[AXIS1]=true;myMotionInitiated[AXIS1]=false;}
    if (myMotionActive[AXIS1] && abs(myActualMotorSpeed[AXIS1])<AXIS_STANDSTILL_VELOCITY_THRESHOLD-AXIS_STANDSTILL_VELOCITY_HYSTERESIS)
      {myMotionStandstill[AXIS1]=true;myMotionActive[AXIS1]=false;}

    //Axis 2 standstill monitoring
    if (myMotionInitiated[AXIS2] && abs(myActualMotorSpeed[AXIS2])>AXIS_STANDSTILL_VELOCITY_THRESHOLD+AXIS_STANDSTILL_VELOCITY_HYSTERESIS)
      {myMotionActive[AXIS2]=true;myMotionInitiated[AXIS2]=false;myMotionStandstill[AXIS2]=false;}
    if (myMotionActive[AXIS2] && abs(myActualMotorSpeed[AXIS2])<AXIS_STANDSTILL_VELOCITY_THRESHOLD-AXIS_STANDSTILL_VELOCITY_HYSTERESIS)
      {myMotionStandstill[AXIS2]=true;myMotionActive[AXIS2]=false;}

    //Axis 3 standstill monitoring
    if (myMotionInitiated[AXIS3] && abs(myActualMotorSpeed[AXIS3])>AXIS_STANDSTILL_VELOCITY_THRESHOLD+AXIS_STANDSTILL_VELOCITY_HYSTERESIS)
      {myMotionActive[AXIS3]=true;myMotionInitiated[AXIS3]=false;myMotionStandstill[AXIS3]=false;}
    if (myMotionActive[AXIS3] && abs(myActualMotorSpeed[AXIS3])<AXIS_STANDSTILL_VELOCITY_THRESHOLD-AXIS_STANDSTILL_VELOCITY_HYSTERESIS)
      {myMotionStandstill[AXIS3]=true;myMotionActive[AXIS3]=false;}

    //Global position available
    if (myMotionStandstill[AXIS1] && myMotionStandstill[AXIS2] && myMotionStandstill[AXIS3])
      {myGlobalPositionSetpointAvailable=true;
       myMotionStandstill[AXIS2]=false;
       myMotionStandstill[AXIS3]=false;
       myMotionStandstill[AXIS1]=false;
       s="0";
       s=strcat(s,NumToStr(myActivePoint));
       s=strcat(s,".rso");
       PlayFileEx(s, 3, false); Wait(MS_500);
      }



    if (myGlobalPositionSetpointAvailable)
      {
      if (myRequestSingleMotionCommand)
        {
          myRequestSingleMotionCommand=false;
          myMotionCommandOn[AXIS1]=true;
          myMotionCommandOn[AXIS2]=true;
          myMotionCommandOn[AXIS3]=true;
          myGlobalPositionSetpointAvailable=false;

        }
      //Wait(MS_500);
      //Wait(SEC_2);

      }

    if (myActivity>=ACTIVITY_TEACHPOINT1 && myActivity<=MAX_POINTS-1)
      {
            myActivityType=ACTIVITY_TYPE_TEACH_POINT;
            myActivePoint=myActivity;
          }

        if (myActivity==ACTIVITY_COMPLEX) myActivityType=ACTIVITY_TYPE_COMPLEX_1;


    if (myActivity==ACTIVITY_PP)
      {
        myActivityType=ACTIVITY_TYPE_POINT_TO_POINT;
        if (myInitItinerary && myGlobalPositionSetpointAvailable)
          {
            myInitItinerary=false;
            myItineraryActive=true;
            myActivePoint=ACTIVITY_TEACHPOINT1;
            myRequestSingleMotionCommand=true;
          }
        if (myItineraryActive && !myRequestSingleMotionCommand && myGlobalPositionSetpointAvailable)
          {
            myActivePoint=(myActivePoint+1) % (MAX_POINTS);
            if (myActivePoint==ACTIVITY_TEACHPOINT9) {myRequestSingleMotionCommand=true;myItineraryActive=false;}
            else {myRequestSingleMotionCommand=true;}
          }
       }
    if (myActivity==ACTIVITY_SAVE_POINTS)
      {
        myActivityType=ACTIVITY_TYPE_SAVE_POINTS;
      }
    if (myActivity>=ACTIVITY_HOME_AXIS1 && myActivity<=ACTIVITY_HOME_AXIS3)
      {
        myHomingAxis=myActivity-ACTIVITY_HOME_AXIS1;
        myActivityType=ACTIVITY_TYPE_HOME_AXIS;
      }
    if (myActivity==ACTIVITY_EXIT_PROG)
      {
        myActivityType=ACTIVITY_TYPE_EXIT_PROG;
      }
    if (myActivity==ACTIVITY_RELEASE_AXES)
      {
        myActivityType=ACTIVITY_TYPE_RELEASE_AXES;
      }

    if (myActivity==ACTIVITY_COMPLEX)
      {
        myActivityType=ACTIVITY_TYPE_COMPLEX_1;
        if (myProgramActive && myInitProgram)
          {
            myInitProgram=false;
            myActivePoint=ACTIVITY_TEACHPOINT2;
            myProgramState=BEFORE_PICK_UP;
            myRequestSingleMotionCommand=true;
          }
        if (myProgramActive && !myRequestSingleMotionCommand && myGlobalPositionSetpointAvailable)
          {
             switch (myProgramState)
                { case IN_HOME_POSITION:  Wait(SEC_2);myActivePoint=BEFORE_PICK_UP;myRequestSingleMotionCommand=true;myProgramState=BEFORE_PICK_UP;break;
                  case BEFORE_PICK_UP:    myActivePoint=CHECK_PICK_UP_1;myRequestSingleMotionCommand=true;myProgramState=CHECK_PICK_UP_1;break;
                  case CHECK_PICK_UP_1:   Wait(SEC_2);if(myUltrasonicDist<ULTRASONIC_THRESHOLD)
                                          {myActivePoint=PREP1_PICK_UP_1;myRequestSingleMotionCommand=true;myProgramState=PREP1_PICK_UP_1;}
                                          else
                                          {myActivePoint=BEFORE_PICK_UP;myRequestSingleMotionCommand=true;myProgramState=BEFORE_PICK_UP;}
                                          break;
                  case PREP1_PICK_UP_1:myActivePoint++;myProgramState++;myRequestSingleMotionCommand=true;break;
                  case PREP2_PICK_UP_1:myActivePoint++;myProgramState++;myRequestSingleMotionCommand=true;break;
                  case PICK_UP_1:myActivePoint++;myProgramState++;myRequestSingleMotionCommand=true;break;
                  case TRANSPORT:myActivePoint++;myProgramState++;myRequestSingleMotionCommand=true;break;
                  case DROP_1:myActivePoint++;myProgramState++;myRequestSingleMotionCommand=true;break;
                  case DROP_2:myActivePoint=BEFORE_PICK_UP;myProgramState=BEFORE_PICK_UP;myRequestSingleMotionCommand=true;break;
                }
          }
       }

     }
}

task MOTION_AXIS1()
{
  byte p,i,d;
  int me;
  long diff;
  me=AXIS1;
  p=AXIS1_P;
  i=AXIS1_I;
  d=AXIS1_D;
  while(true) {
    if (myInitHoming && myHomingAxis==me) {
       myInitHoming=false;
       OnRev(OUT_A, AXIS1_APPROACH_HOME_SPEED);
    }
    if (myResetHoming && myHomingAxis==me && myHomingActive) {
       myResetHoming=false;
       Off(OUT_A);
    }
    if (myInitMotionAfterHoming && myHomingAxis==me) {
       myInitMotionAfterHoming=false;
       myMotionInitiated[me]=true;
       myMotionStandstill[me]=false;
       myMotionActive[me]=false;
       RotateMotorPID(OUT_A, AXIS1_AFTER_HOME_SPEED, AXIS1_AFTER_HOME_POSITION,p,i,d);
    }
    if (myMotionCommandOn[me]) {
      myMotionCommandOn[me]=false;
      diff=myTachoCounts[me]-myPointsPosition[myActivePoint][me];
      if (abs(diff)>POSITION_REACHED_THRESHOLD) {
        myMotionInitiated[me]=true;
        myMotionStandstill[me]=false;
        myMotionActive[me]=false;
        RotateMotorPID(OUT_A, myPointsSpeed[myActivePoint][me], diff*(-1),p,i,d);
      }
      else  {
        myMotionStandstill[me]=true;
      }
    }
  }
}

task MOTION_AXIS2()
{
  byte p,i,d;
  int me;
  long diff;
  me=AXIS2;
  p=AXIS2_P;
  i=AXIS2_I;
  d=AXIS2_D;
  while(true) {
    if (myInitHoming && myHomingAxis==me) {
       myInitHoming=false;
       OnFwd(OUT_B, AXIS2_APPROACH_HOME_SPEED);
    }
    if (myResetHoming && myHomingAxis==me && myHomingActive) {
       myResetHoming=false;
       Off(OUT_B);
    }
    if (myInitMotionAfterHoming && myHomingAxis==me) {
       myInitMotionAfterHoming=false;
       myMotionInitiated[me]=true;
       myMotionStandstill[me]=false;
       myMotionActive[me]=false;
       RotateMotorPID(OUT_B, (-1)*AXIS2_AFTER_HOME_SPEED, AXIS2_AFTER_HOME_POSITION,p,i,d);
    }
    if (myMotionCommandOn[me]) {
      myMotionCommandOn[me]=false;
      diff=myTachoCounts[me]-myPointsPosition[myActivePoint][me];
      if (abs(diff)>POSITION_REACHED_THRESHOLD) {
        myMotionInitiated[me]=true;
        myMotionStandstill[me]=false;
        myMotionActive[me]=false;
        RotateMotorPID(OUT_B, myPointsSpeed[myActivePoint][me], diff*(-1),p,i,d);
      }
      else  {
        myMotionStandstill[me]=true;
      }
    }
  }
}

task MOTION_AXIS3()
{
  byte p,i,d;
  int me;
  long diff;
  me=AXIS3;
  p=AXIS3_P;
  i=AXIS3_I;
  d=AXIS3_D;
  while(true) {
    if (myInitHoming && myHomingAxis==me) {
       myInitHoming=false;
       OnFwd(OUT_C, AXIS3_APPROACH_HOME_SPEED);
    }
    if (myResetHoming && myHomingAxis==me && myHomingActive) {
       myResetHoming=false;
       Off(OUT_C);
    }
    if (myInitMotionAfterHoming && myHomingAxis==me) {
       myInitMotionAfterHoming=false;
       myMotionInitiated[me]=true;
       myMotionStandstill[me]=false;
       myMotionActive[me]=false;
       RotateMotorPID(OUT_C, (-1)*AXIS3_AFTER_HOME_SPEED, AXIS3_AFTER_HOME_POSITION,p,i,d);
    }
    if (myMotionCommandOn[me]) {
      myMotionCommandOn[me]=false;
      diff=myTachoCounts[me]-myPointsPosition[myActivePoint][me];
      if (abs(diff)>POSITION_REACHED_THRESHOLD) {
        myMotionInitiated[me]=true;
        myMotionStandstill[me]=false;
        myMotionActive[me]=false;
        RotateMotorPID(OUT_C, myPointsSpeed[myActivePoint][me], diff*(-1),p,i,d);
      }
      else  {
        myMotionStandstill[me]=true;
      }
    }
  }
}

void init() {
  myDebugString1="Debug string 1.";
  if (fnc_LoadPoints()) {;//PlayFileEx("Good.rso", 3, false);
                         }
  else                  {PlayFileEx("Error.rso", 3, false);}
  if (fnc_LoadPosition()) {;PlayFileEx("Good.rso", 3, false);
                         }
  else                  {PlayFileEx("Error.rso", 3, false);}

  myMotionCommandOn[AXIS1]=false;
  myMotionCommandOn[AXIS2]=false;
  myMotionCommandOn[AXIS3]=false;

  myMotionActive[AXIS1]=false;
  myMotionActive[AXIS2]=false;
  myMotionActive[AXIS3]=false;

  myMotionStandstill[AXIS1]=false;
  myMotionStandstill[AXIS2]=false;
  myMotionStandstill[AXIS3]=false;

  myGlobalPositionSetpointAvailable=true;
  myActivityType=ACTIVITY_TEACHPOINT1;
  myRequestSingleMotionCommand=false;
  myInitItinerary=false;myItineraryActive=false;myInitProgram=false;
  myInitHoming=false;myHomingActive=false;myInitMotionAfterHoming=false;myResetHoming=false;

  SetSensorTouch(IN_1);
  SetSensorUltrasonic(IN_2);

  /*
  myPointsPosition[ACTIVITY_TEACHPOINT1][AXIS1]=AXIS_TEST_MOTION;
  myPointsPosition[ACTIVITY_TEACHPOINT1][AXIS2]=AXIS_TEST_MOTION;
  myPointsPosition[ACTIVITY_TEACHPOINT1][AXIS3]=AXIS_TEST_MOTION;

  myPointsPosition[ACTIVITY_TEACHPOINT8][AXIS1]=32101;
  myPointsPosition[ACTIVITY_TEACHPOINT8][AXIS2]=31415;
  myPointsPosition[ACTIVITY_TEACHPOINT8][AXIS3]=66666;
  
  myPointsPosition[ACTIVITY_TEACHPOINT9][AXIS1]=12345;
  myPointsPosition[ACTIVITY_TEACHPOINT9][AXIS2]=67890;
  myPointsPosition[ACTIVITY_TEACHPOINT9][AXIS3]=98765;
  */
  /*
  for (int i=0;i<=MAX_POINTS-1;i++){
    myPointsPosition[i][AXIS1]=i;
    myPointsSpeed[i][AXIS1]=AXIS_TEST_SPEED;
    myPointsSpeed[i][AXIS2]=AXIS_TEST_SPEED;
    myPointsSpeed[i][AXIS3]=AXIS_TEST_SPEED;
  }
  */
}

task main() {
  //Initialisation
  init();
  //Task configuration
  Precedes(INPUT,HMI,CONTROL, MOTION_AXIS1,MOTION_AXIS2,MOTION_AXIS3);
}
